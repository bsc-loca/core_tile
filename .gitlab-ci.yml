image: registry.gitlab.bsc.es/hwdesign/containerhub/questa_riscv:latest

## This workflow avoids duplicate pipelines when there is an open merge request (commit_branch + merge_request) 
## so only the open merge request will be executed and not the commit_branch. PIPELINE_BRANCH will be used to refer to
## CI_COMMIT_BRANCH or CI_MERGE_REQUEST_SOURCE_BRANCH_NAME, we will not differentiate between them.
## If a rule matches, when: always is the default, and when: never is the default if nothing matches
workflow:
  rules:
    - if: ($CI_PIPELINE_SOURCE == "merge_request_event") # Merge requests 
      variables: 
        PIPELINE_BRANCH: $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME 
    - if: ($CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_PIPELINE_SOURCE != "schedule") # Fix detached merge request pipelines
      when: never 
    - if: ($CI_COMMIT_BRANCH) # All branches
      variables: 
        PIPELINE_BRANCH: $CI_COMMIT_BRANCH

variables:
  GIT_STRATEGY: clone
  GIT_SOURCES_ATTEMPTS: 4
  GIT_SUBMODULE_STRATEGY: recursive
  GIT_CLEAN_FLAGS: -ffdx
  GIT_DEPTH: 1
  GIT_SUBMODULE_DEPTH: 1
  RISCV_GCC: /opt/riscv-gnu-toolchain/rvv-1.0.0/bin/riscv64-unknown-elf-gcc 
  RISCV_OBJDUMP: /opt/riscv-gnu-toolchain/rvv-1.0.0/bin/riscv64-unknown-elf-objcopy 

stages:
  - linting
  - building
  - simulation
  - fpga

default:
  tags:
    - dv
  before_script:
    - echo $CI_PIPELINE_SOURCE
    - echo $CI_COMMIT_BRANCH
    - echo $CI_OPEN_MERGE_REQUESTS
    - git config --global url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.bsc.es/".insteadOf "https://gitlab.bsc.es/"
    - git config --global url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.bsc.es/".insteadOf "git@gitlab-internal.bsc.es:"

  # Setup licenses
    - export MGLS_LICENSE_FILE=1717@epi03.bsc.es
    - export LM_LICENSE_FILE=1717@epi03.bsc.es

    - source /load_modulefiles_bash.sh
    - module load verilator/5.014
    - module load rvv/1.0.0
    - module load gcc/10.5.0

lint-verilator:
  stage: linting
  script:
    - verilator --version
    - make lint-verilator
  allow_failure: true

lint-spyglass:
  stage: linting
  image: registry.gitlab.bsc.es/hwdesign/containerhub/spyglass:latest
  variables:
    # Needed for proper exit code detection 
    # https://gitlab.com/gitlab-org/gitlab-runner/-/issues/28658
    FF_USE_NEW_BASH_EVAL_STRATEGY: 1 
  before_script:
    - echo $CI_PIPELINE_SOURCE
    - echo $CI_COMMIT_BRANCH
    - echo $CI_OPEN_MERGE_REQUESTS
    # Setup licenses
    - export SNPS_LICENSE_FILE=27020@epi01.bsc.es
    - export SNPSLMD_LICENSE_FILE=27020@epi01.bsc.es
    - export LM_LICENSE_FILE=$LM_LICENSE_FILE:$SNPS_LICENSE_FILE:$SNPSLMD_LICENSE_FILE
  script:
    - ./scripts/lint_spyglass.sh
  allow_failure:
    exit_codes: 11 # Only allow failure in case there are warnings but no errors

build-isa-tests:
  stage: building
  script:
    - $RISCV_GCC --version
    - make build-isa-tests
  artifacts:
    paths:
    - tb/tb_isa_tests/build
    expire_in: 1 week

build-benchmarks:
  stage: building
  script:
    - $RISCV_GCC --version
    - make build-benchmarks
  artifacts:
    paths:
    - benchmarks
    expire_in: 1 week

build-simulator:
  stage: building
  script:
    - verilator --version
    - gcc --version
    - make sim
  artifacts:
    paths:
    - simulator/reference/build/libdisasm.so
    - sim
    - bootrom.hex
    expire_in: 1 week


build-spike:
  stage: building
  rules:
    - if: ($CI_PIPELINE_SOURCE == "schedule")
      when: always
  script:
    - gcc --version
    - make spike
  artifacts:
    paths:
    - simulator/reference/build/spike
    expire_in: 1 week

build-torture:
  stage: building
  rules:
    - if: ($CI_PIPELINE_SOURCE == "schedule")
      when: always
  script:
    - $RISCV_GCC --version
    - make build-torture
  artifacts:
    paths:
    - tb/tb_torture/riscv-torture/output

isa-tests:
  stage: simulation
  dependencies:
    - build-simulator
    - build-isa-tests
  script:
    - ./tb/tb_isa_tests/run-tests.py ./sim tb/tb_isa_tests/build/isa

benchmarks:
  stage: simulation
  dependencies:
    - build-simulator
    - build-benchmarks
  timeout: 4h
  script:
    - ./run-benchmarks.sh

torture:
  stage: simulation
  rules:
    - if: ($CI_PIPELINE_SOURCE == "schedule")
      when: always
  dependencies:
    - build-simulator
    - build-torture
    - build-spike
  timeout: 4h
  parallel:
    matrix:
      - CONFIG:
        - peta
        - large_fp
        - tlb_large
        - tlb_medium
  script:
    - tb/tb_torture/run_torture.sh $CONFIG
  artifacts:
    when: on_failure
    paths:
    - tb/tb_torture/signatures

random_regression:
  stage: simulation
  rules:
    - if: ($CI_PIPELINE_SOURCE == "schedule")
      when: always
  timeout: 8h
  script:
    - make clone_dv
    - cd verif/core_uvm
    - mkdir -p tests/build/generated_tests
    - ./generate_random_tests.sh 40
    - make compile_all SARGANTANA=enable RTLDIR=../../ COVERAGE=enable
    - python3 -u run.py -r riscv-dv_regression.yaml --coverage --coverage-report-html
  artifacts:
    untracked: true
    when: always
    paths:
        - verif/core_uvm/sim/build/comp_transcript
        - verif/core_uvm/regress/results/sargantana_random_riscvdv_tests/*
        - verif/generated_tests_1/seed.yaml
        - verif/generated_tests_2/seed.yaml
        - verif/generated_tests_3/seed.yaml
        - verif/generated_tests_4/seed.yaml
        - verif/core_uvm/tests/build/generated_tests/*

uvm_regression:
  stage: simulation
  timeout: 8h
  script:
    - make clone_uvm
    - cd verif/core_uvm
    - make compile_all SARGANTANA=enable RTLDIR=../../
    - python3 -u run.py -r isa_tests_sargantana.yaml
  artifacts:
    untracked: true
    when: always
    paths:
        - verif/core_uvm/sim/build/comp_transcript
        - verif/core_uvm/regress/results/sargantana_isa_check/*

fpga:
  stage: fpga
  variables:
    COMMIT_SHA: $CI_COMMIT_SHA
    COMMIT_REF: $CI_COMMIT_REF_NAME
  trigger:
    project: hwdesign/fpga/integration-lab/fpga-shell
    branch: ft/ci_for_sargantana
    strategy: depend
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

#questa:verilog:
#  image: localhost:5000/epi_rtl-vsim
#  stage: simulation
#  tags:
#    - questasim
#  script:
#    - make questa
#  allow_failure: true
#  artifacts:
#    paths:
#    - artifact_questa.log
#    expire_in: 1 week
