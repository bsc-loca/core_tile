image: registry.gitlab.bsc.es/hwdesign/containerhub/questa_riscv:latest

## This workflow avoids duplicate pipelines when there is an open merge request (commit_branch + merge_request) 
## so only the open merge request will be executed and not the commit_branch. PIPELINE_BRANCH will be used to refer to
## CI_COMMIT_BRANCH or CI_MERGE_REQUEST_SOURCE_BRANCH_NAME, we will not differentiate between them.
## If a rule matches, when: always is the default, and when: never is the default if nothing matches
workflow:
  rules:
    - if: ($CI_PIPELINE_SOURCE == "pipeline") # Triggered pipelines
      when: always
    - if: ($CI_PIPELINE_SOURCE == "merge_request_event") # Merge requests 
      variables: 
        PIPELINE_BRANCH: $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME 
    - if: ($CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_PIPELINE_SOURCE != "schedule") # Fix detached merge request pipelines
      when: never 
    - if: ($CI_COMMIT_BRANCH) # All branches
      variables: 
        PIPELINE_BRANCH: $CI_COMMIT_BRANCH

variables:
  GIT_STRATEGY: clone
  GIT_SOURCES_ATTEMPTS: 4
  GIT_SUBMODULE_STRATEGY: recursive
  GIT_CLEAN_FLAGS: -ffdx
  GIT_DEPTH: 1
  GIT_SUBMODULE_DEPTH: 1
  RISCV_GCC: /opt/riscv-gnu-toolchain/rvv-1.0.0/bin/riscv64-unknown-elf-gcc 
  RISCV_OBJDUMP: /opt/riscv-gnu-toolchain/rvv-1.0.0/bin/riscv64-unknown-elf-objcopy 
  SARGANTANA_OUT_DIR: /nfs/synthesis/CI-SARGANTANA

.default_rules:
  rules:
    - if: ($CI_PIPELINE_SOURCE == "pipeline" && $JOB_ALLOW_TRIGGER != "true")
      when: never
    - if: ($do_synthesis && ($CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web"))
      when: never
    - when: always

.synthesis_rules:
  - if: ($do_synthesis && ($CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web"))

.random_regression_rules:
  - if: ($CI_PIPELINE_SOURCE == "schedule" && $do_synthesis == null)
    when: always

.rule_only_merge:
  - if: ($CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE !~ /Draft:/) # Merge requests, not draft 

stages:
  - linting
  - building
  - simulation
  - synthesis
  - fpga

before_script:
  - echo $CI_PIPELINE_SOURCE
  - echo $CI_COMMIT_BRANCH
  - echo $CI_OPEN_MERGE_REQUESTS
  - git config --global url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.bsc.es/".insteadOf "https://gitlab.bsc.es/"
  - git config --global url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.bsc.es/".insteadOf "git@gitlab-internal.bsc.es:"
  # Setup licenses
  - export MGLS_LICENSE_FILE=1717@epi03.bsc.es
  - export LM_LICENSE_FILE=1717@epi03.bsc.es
  - source /modules.sh
  - module load verilator
  - module load rvv/1.0.0
  - module load gcc

default:
  tags:
    - dv

lint-verilator:
  stage: linting
  rules:
    - !reference [.default_rules, rules]
  script:
    - verilator --version
    - make lint-verilator
  allow_failure: true

lint-spyglass:
  stage: linting
  rules:
    - !reference [.default_rules, rules]
  image: registry.gitlab.bsc.es/hwdesign/containerhub/spyglass:latest
  variables:
    # Needed for proper exit code detection 
    # https://gitlab.com/gitlab-org/gitlab-runner/-/issues/28658
    FF_USE_NEW_BASH_EVAL_STRATEGY: 1 
  before_script:
    - echo $CI_PIPELINE_SOURCE
    - echo $CI_COMMIT_BRANCH
    - echo $CI_OPEN_MERGE_REQUESTS
    # Setup licenses
    - export SNPS_LICENSE_FILE=27020@epi01.bsc.es
    - export SNPSLMD_LICENSE_FILE=27020@epi01.bsc.es
    - export LM_LICENSE_FILE=$LM_LICENSE_FILE:$SNPS_LICENSE_FILE:$SNPSLMD_LICENSE_FILE
  script:
    - ./scripts/lint_spyglass.sh
  allow_failure:
    exit_codes: 11 # Only allow failure in case there are warnings but no errors

lint-dc-elab:
  image: registry.gitlab.bsc.es/hwdesign/containerhub/rocky_base:latest
  stage: linting
  rules:
    !reference [.rule_only_merge]
  tags:
    - bm
  timeout: 1 hrs
  before_script:
    - echo $CI_PIPELINE_SOURCE
    - echo $CI_COMMIT_BRANCH
    - echo $CI_OPEN_MERGE_REQUESTS
    # Setup licenses
    - export SNPSLMD_QUEUE=true
    - export SNPS_LICENSE_FILE=27020@epi01.bsc.es
    - export SNPSLMD_LICENSE_FILE=27020@epi01.bsc.es
    - export LM_LICENSE_FILE=$LM_LICENSE_FILE:$SNPS_LICENSE_FILE:$SNPSLMD_LICENSE_FILE
    # Git configurations
    - git config --global url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.bsc.es/".insteadOf "https://gitlab.bsc.es/"
    - git config --global url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.bsc.es/".insteadOf "git@gitlab-internal.bsc.es:"
    # Setup synopys tools
    - source /eda/synopsys/synopsys.sh
  script:
    - make dc_elab > dc_elab.$CI_PIPELINE_ID.log
    - |  
      TXT_RED="\e[5;41m" && TXT_GREEN="\e[5;42m" && TXT_CLEAR="\e[0;0;0m"
      if grep -q Error: dc_elab.$CI_PIPELINE_ID.log; then
        echo -e "\n"
        grep Error: dc_elab.$CI_PIPELINE_ID.log
        echo -e "\n \nRTL elaboration: ${TXT_RED} FAILED ${TXT_CLEAR}\n \n "
        exit 1
      else
        echo -e "\n \nRTL elaboration: ${TXT_GREEN} PASSED ${TXT_CLEAR}\n \n "
      fi
  artifacts:
    expire_in: 1 week
    when: always
    paths:
        - dc_elab.$CI_PIPELINE_ID.log

lint-vc-static:
  before_script:
    - export SNPS_LICENSE_FILE=27020@epi01.bsc.es
    - export SNPSLMD_LICENSE_FILE=27020@epi01.bsc.es
    - export SNPSLMD_QUEUE=true
    - export LM_LICENSE_FILE=$LM_LICENSE_FILE:$SNPS_LICENSE_FILE:$SNPSLMD_LICENSE_FILE
    - source /eda/synopsys/synopsys.sh
  image: registry.gitlab.bsc.es/hwdesign/containerhub/rocky_base:latest
  stage: linting
  rules:
    !reference [.rule_only_merge]  
  tags:
    - bm
  script:
    - make lint-vc 2>&1 | tee  vc_static.$CI_PIPELINE_ID.log
    - VAR=$(grep -E -m 1 "^..Total.+" vc_static.$CI_PIPELINE_ID.log)
    - FATALS=$(echo $VAR | awk -F' ' '{ print $2 }')
    - ERRORS=$(echo $VAR | awk -F' ' '{ print $3 }')
    - WARNINGS=$(echo $VAR | awk -F' ' '{ print $4 }')
    - |
      if [ $ERRORS -ne 0 ] || [ $FATALS -ne 0 ]; then
        echo "$ERRORS errors / $FATALS fatals found" && exit 1
      else
        echo "No errors found. $WARNINGS warnings"
      fi
  artifacts:
    expire_in: 1 week
    when: always
    paths:
        - report_lint.txt


build-isa-tests:
  stage: building
  rules:
    - !reference [.default_rules, rules]
  script:
    - $RISCV_GCC --version
    - make build-isa-tests
  artifacts:
    paths:
    - tb/tb_isa_tests/build
    expire_in: 1 week

build-benchmarks:
  stage: building
  rules:
    - !reference [.default_rules, rules]
  script:
    - $RISCV_GCC --version
    - make build-benchmarks BENCHMARKS_CI=1
  artifacts:
    paths:
    - benchmarks
    expire_in: 1 week

build-simulator:
  stage: building
  rules:
    - !reference [.default_rules, rules]
  script:
    - verilator --version
    - gcc --version
    - make sim
  artifacts:
    paths:
    - simulator/reference/build/libdisasm.so
    - sim
    - bootrom.hex
    expire_in: 1 week

build-vcs:
  image: registry.gitlab.bsc.es/hwdesign/containerhub/vcs-riscv:latest
  stage: building
  rules:
    - !reference [.default_rules, rules]
  tags:
    - dv
  timeout: 1 hrs
  before_script:
    - echo $CI_PIPELINE_SOURCE
    - echo $CI_COMMIT_BRANCH
    - echo $CI_OPEN_MERGE_REQUESTS
    # Setup licenses
    - export MGLS_LICENSE_FILE=1717@epi03.bsc.es
    - export SNPS_LICENSE_FILE=27020@epi01.bsc.es
    - export SNPSLMD_LICENSE_FILE=27020@epi01.bsc.es
    - export LM_LICENSE_FILE=$LM_LICENSE_FILE:$SNPS_LICENSE_FILE:$SNPSLMD_LICENSE_FILE:$MGLS_LICENSE_FILE
    - source /load_modulefiles_bash.sh
    - module load gcc
  script:
    - make libdisasm
    - export CI_VCS=1
    - ./simulator/vcs/sim.sh
  artifacts:
    paths:
    - simulator/reference/build/libdisasm.so
    - build_vcs
    expire_in: 1 week 

# Only needed by 'torture'
#build-spike:
#  stage: building
#  rules:
#    - if: ($CI_PIPELINE_SOURCE == "schedule")
#      when: always
#  script:
#    - gcc --version
#    - make spike
#  artifacts:
#    paths:
#    - simulator/reference/build/spike
#    expire_in: 1 week

#build-torture:
#  stage: building
#  rules:
#    - if: ($CI_PIPELINE_SOURCE == "schedule")
#      when: always
#  script:
#    - $RISCV_GCC --version
#    - make build-torture
#  artifacts:
#    paths:
#    - tb/tb_torture/riscv-torture/output

isa-tests:
  stage: simulation
  rules:
    - !reference [.default_rules, rules]
  dependencies:
    - build-simulator
    - build-isa-tests
  script:
    - ./tb/tb_isa_tests/run-tests.py ./sim tb/tb_isa_tests/build/isa

benchmarks:
  stage: simulation
  rules:
    - !reference [.default_rules, rules]
  dependencies:
    - build-simulator
    - build-benchmarks
  timeout: 4h
  script:
    - ./run-benchmarks.sh

vcs:
  image: registry.gitlab.bsc.es/hwdesign/containerhub/vcs-riscv:latest
  stage: simulation
  rules:
    - !reference [.default_rules, rules]
  timeout: 1 hrs
  dependencies:
    - build-vcs
    - build-isa-tests
    - build-simulator
  tags:
    - dv
  before_script:
    - echo $CI_PIPELINE_SOURCE
    - echo $CI_COMMIT_BRANCH
    - echo $CI_OPEN_MERGE_REQUESTS
    # Setup licenses
    - export MGLS_LICENSE_FILE=1717@epi03.bsc.es
    - export SNPS_LICENSE_FILE=27020@epi01.bsc.es
    - export SNPSLMD_LICENSE_FILE=27020@epi01.bsc.es
    - export LM_LICENSE_FILE=$LM_LICENSE_FILE:$SNPS_LICENSE_FILE:$SNPSLMD_LICENSE_FILE:$MGLS_LICENSE_FILE
    - source /load_modulefiles_bash.sh
    - module load gcc
  script:
    - cp bootrom.hex build_vcs/bootrom.hex
    - ./build_vcs/simv +vcs+lic+wait +load=./tb/tb_isa_tests/build/isa/rv64ui-p-add

# Has many problemes, never managed to get it working properly...
#torture:
#  stage: simulation
#  rules:
#    - if: ($CI_PIPELINE_SOURCE == "schedule")
#      when: always
#  dependencies:
#    - build-simulator
#    - build-torture
#    - build-spike
#  timeout: 4h
#  parallel:
#    matrix:
#      - CONFIG:
#        - peta
#        - large_fp
#        - tlb_large
#        - tlb_medium
#  script:
#    - tb/tb_torture/run_torture.sh $CONFIG
#  artifacts:
#    when: on_failure
#    paths:
#    - tb/tb_torture/signatures

random_regression:
  stage: simulation
  rules:
    - !reference [ .random_regression_rules ]
  timeout: 8h
  variables:
    RUNNER_SCRIPT_TIMEOUT: 7h30m
  script:
    - make clone_dv
    - cd verif/core_uvm
    - mkdir -p tests/build/generated_tests
    - ./generate_random_tests.sh 40
    - make compile_all SARGANTANA=enable RTLDIR=../../ COVERAGE=enable INTERRUPTS=enable
    - python3 -u run.py -r riscv-dv_regression.yaml --coverage --coverage-report-html --interrupts
  artifacts:
    untracked: true
    when: always
    paths:
        - verif/core_uvm/sim/build/comp_transcript
        - verif/core_uvm/regress/results/sargantana_random_riscvdv_tests/*
        - verif/core_uvm/generated_tests_*/*
        - verif/core_uvm/tests/build/generated_tests/*

uvm_regression:
  stage: simulation
  parallel:
    matrix:
      - regression_type: [isa_tests, rvv_tests]
  variables:
    JOB_ALLOW_TRIGGER: "true"
  rules:
    - !reference [.default_rules, rules]
  timeout: 8h
  script:
    - make clone_uvm SPIKE_URL_BASE=https://gitlab.bsc.es/api/v4/projects/1982/packages/generic/sargantana-rvv-1.0/0.0.1/spike
    - cd verif/core_uvm
    - make compile_all SARGANTANA=enable RTLDIR=../../
    - python3 -u run.py -r ${regression_type}_sargantana.yaml
  artifacts:
    untracked: true
    when: always
    paths:
        - verif/core_uvm/sim/build/comp_transcript
        - verif/core_uvm/regress/results/sargantana_isa_check/*

dc_synthesis:
  image: registry.gitlab.bsc.es/hwdesign/containerhub/rocky_base:latest
  stage: synthesis
  tags: 
    - bm
  timeout: 8h
  rules:
    - !reference [.synthesis_rules]
  before_script:
    # add ci token to git url
    - git config --global url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.bsc.es/".insteadOf "https://gitlab.bsc.es/"
    - git config --global url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.bsc.es/".insteadOf "git@gitlab-internal.bsc.es:"
    # setup licenses
    - export SNPSLMD_QUEUE=true
    - export SNPS_LICENSE_FILE=27020@epi01.bsc.es
    - export SNPSLMD_LICENSE_FILE=27020@epi01.bsc.es
    - export LM_LICENSE_FILE=$LM_LICENSE_FILE:$SNPS_LICENSE_FILE:$SNPSLMD_LICENSE_FILE
    # setup tools
    - source /eda/synopsys/synopsys.sh
  script:
    - make dc_syn 2>&1 | tee ./dc_syn.$CI_PIPELINE_ID.log 
    - mkdir -p $SARGANTANA_OUT_DIR/$CI_COMMIT_REF_NAME/$CI_COMMIT_SHORT_SHA
    - find $SARGANTANA_OUT_DIR/$CI_COMMIT_REF_NAME -mindepth 1 -mtime +30 -delete
    - cp ./dc_syn.$CI_PIPELINE_ID.log $SARGANTANA_OUT_DIR/$CI_COMMIT_REF_NAME/$CI_COMMIT_SHORT_SHA
    - cp -r build/dc/* $SARGANTANA_OUT_DIR/$CI_COMMIT_REF_NAME/$CI_COMMIT_SHORT_SHA
    - ln -srfn $SARGANTANA_OUT_DIR/$CI_COMMIT_REF_NAME/$CI_COMMIT_SHORT_SHA $SARGANTANA_OUT_DIR/$CI_COMMIT_REF_NAME/latest    
  artifacts:
    paths:
      - dc_syn.$CI_PIPELINE_ID.log
    when: always

fpga:
  stage: fpga
  rules:
    - !reference [.default_rules, rules]
  variables:
    COMMIT_SHA: $CI_COMMIT_SHA
    COMMIT_REF: $CI_COMMIT_REF_NAME
  trigger:
    project: hwdesign/fpga/integration-lab/fpga-shell
    branch: ft/ci_for_sargantana
    strategy: depend
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
